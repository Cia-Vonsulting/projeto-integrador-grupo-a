AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: 'Stack cfstack-eedb015-2025-grupo-a com os recursos do grupo A da Especializacao Engenharia de Dados e Big Data turma de 2024 para a aula de Projeto Integrador'

Parameters:

  DataUrl:
    Type: String

  TaxiZoneLookUpUrl:
    Type: String

  TaxiZoneShapeFileUrl:
    Type: String

Resources:

############################################################################################################
########################################      BUCKETS      #################################################
############################################################################################################

  BucketRaw:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-raw"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Projeto
          Value: Projeto Integrador

  BucketTrusted:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-trusted"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Projeto
          Value: Projeto Integrador

  BucketAnalytics:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-analytics"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Projeto
          Value: Projeto Integrador

############################################################################################################
########################################       ROLES       #################################################
############################################################################################################

  IAMRoleFunctionIngestion:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-function-ingestion-role"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "${BucketRaw.Arn}*"
      Tags:
        - Key: Projeto
          Value: Projeto Integrador

############################################################################################################
########################################      LAMBDAS      #################################################
############################################################################################################

  FunctionTripDataIngestion:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ingestion-trip-data-function'
      Handler: 'lambda-trip-data-ingestion.handler'
      Architectures:
        - 'arm64'
      MemorySize: 2048
      Timeout: 900
      Runtime: 'python3.12'
      Layers:
        - !Ref WebScrappingLayer
      Role: !GetAtt IAMRoleFunctionIngestion.Arn
      CodeUri: './lambdas'
      Environment:
        Variables:
          NYC_TLC_URL: !Ref DataUrl
          BUCKET_NAME: !Ref BucketRaw
          BUCKET_PREFIX: 'tlc_trip'
      Tags:
        "Projeto": 'Projeto Integrador'

  FunctionGeoDataIngestion:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ingestion-geo-data-function'
      Handler: 'lambda-geo-data-ingestion.handler'
      Architectures:
        - 'arm64'
      MemorySize: 2048
      Timeout: 900
      Runtime: 'python3.12'
      Layers:
        - !Ref WebScrappingLayer
      Role: !GetAtt IAMRoleFunctionIngestion.Arn
      CodeUri: './lambdas'
      Environment:
        Variables:
          TAXI_ZONE_LOOKUP_URL: !Ref TaxiZoneLookUpUrl
          TAXI_ZONE_SHAPEFILE_URL: !Ref TaxiZoneShapeFileUrl
          BUCKET_NAME: !Ref BucketRaw
          BUCKET_PREFIX: 'tlc_trip'
          SHAPEFILE_PREFIX: 'shapefiles'
      Tags:
        "Projeto": 'Projeto Integrador'

############################################################################################################
########################################      LAYERS       #################################################
############################################################################################################

  WebScrappingLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-web-scrapping-layer'
      Description: 'A layer which contains web scrapping libraries'
      ContentUri: './layers/web-scrapping-layer/web-scrapping-layer.zip'
      CompatibleArchitectures:
        - 'arm64'
      CompatibleRuntimes:
        - 'python3.12'


############################################################################################################
########################################   Glue Catalog    #################################################
############################################################################################################

  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: tlc_trip
        Description: "Database para armazenar tabelas da camada Raw do TLC Trip"

  GlueDatabaseTrusted:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: trusted_tlc_trip
        Description: "Database para armazenar tabelas da camada Trusted do TLC Trip"

  GlueDatabaseAnalytics:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: analytics_tlc_trip
        Description: "Database para armazenar tabelas da camada Analytics do TLC Trip"

  GlueTable:
    Type: AWS::Glue::Table
    DependsOn: GlueDatabase
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: tlc_trip
      TableInput:
        Name: yellow_tripdata
        Description: "Tabela de viagens do Yellow Taxi armazenada no S3"
        TableType: EXTERNAL_TABLE
        Parameters:
          classification: "parquet"
          parquet.compression: "SNAPPY"
        StorageDescriptor:
          Columns:
            - Name: VendorID
              Type: int
            - Name: tpep_pickup_datetime
              Type: timestamp
            - Name: tpep_dropoff_datetime
              Type: timestamp
            - Name: passenger_count
              Type: double
            - Name: trip_distance
              Type: double
            - Name: rate_code_id
              Type: int
            - Name: store_and_fwd_flag
              Type: string
            - Name: pu_location_id
              Type: int
            - Name: do_location_id
              Type: int
            - Name: payment_type
              Type: int
            - Name: fare_amount
              Type: double
            - Name: extra
              Type: double
            - Name: mta_tax
              Type: double
            - Name: tip_amount
              Type: double
            - Name: tolls_amount
              Type: double
            - Name: improvement_surcharge
              Type: double
            - Name: total_amount
              Type: double
            - Name: congestion_surcharge
              Type: double
          Location: !Sub s3://${AWS::StackName}-raw/tlc_trip/yellow_tripdata/
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
